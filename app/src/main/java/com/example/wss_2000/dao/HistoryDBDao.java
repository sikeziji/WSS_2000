package com.example.wss_2000.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_DB".
*/
public class HistoryDBDao extends AbstractDao<HistoryDB, Long> {

    public static final String TABLENAME = "HISTORY_DB";

    /**
     * Properties of entity HistoryDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Component = new Property(1, String.class, "component", false, "component");
        public final static Property Time = new Property(2, String.class, "time", false, "time");
        public final static Property Value = new Property(3, String.class, "value", false, "value");
        public final static Property Unit = new Property(4, String.class, "unit", false, "unit");
        public final static Property Flow = new Property(5, String.class, "flow", false, "flow");
        public final static Property A = new Property(6, String.class, "A", false, "A");
        public final static Property Temperature = new Property(7, String.class, "temperature", false, "temperature");
        public final static Property Energy = new Property(8, String.class, "energy", false, "energy");
        public final static Property Tag = new Property(9, String.class, "tag", false, "tag");
    }


    public HistoryDBDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"component\" TEXT," + // 1: component
                "\"time\" TEXT," + // 2: time
                "\"value\" TEXT," + // 3: value
                "\"unit\" TEXT," + // 4: unit
                "\"flow\" TEXT," + // 5: flow
                "\"A\" TEXT," + // 6: A
                "\"temperature\" TEXT," + // 7: temperature
                "\"energy\" TEXT," + // 8: energy
                "\"tag\" TEXT);"); // 9: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String component = entity.getComponent();
        if (component != null) {
            stmt.bindString(2, component);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
 
        String flow = entity.getFlow();
        if (flow != null) {
            stmt.bindString(6, flow);
        }
 
        String A = entity.getA();
        if (A != null) {
            stmt.bindString(7, A);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(8, temperature);
        }
 
        String energy = entity.getEnergy();
        if (energy != null) {
            stmt.bindString(9, energy);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String component = entity.getComponent();
        if (component != null) {
            stmt.bindString(2, component);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
 
        String flow = entity.getFlow();
        if (flow != null) {
            stmt.bindString(6, flow);
        }
 
        String A = entity.getA();
        if (A != null) {
            stmt.bindString(7, A);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(8, temperature);
        }
 
        String energy = entity.getEnergy();
        if (energy != null) {
            stmt.bindString(9, energy);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryDB readEntity(Cursor cursor, int offset) {
        HistoryDB entity = new HistoryDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // component
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flow
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // A
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // temperature
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // energy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComponent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setA(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTemperature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnergy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

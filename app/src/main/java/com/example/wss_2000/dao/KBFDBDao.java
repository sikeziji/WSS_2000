package com.example.wss_2000.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KBFDB".
*/
public class KBFDBDao extends AbstractDao<KBFDB, Long> {

    public static final String TABLENAME = "KBFDB";

    /**
     * Properties of entity KBFDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Component = new Property(1, String.class, "component", false, "component");
        public final static Property Time = new Property(2, String.class, "time", false, "time");
        public final static Property K = new Property(3, String.class, "k", false, "k");
        public final static Property B = new Property(4, String.class, "b", false, "b");
        public final static Property F = new Property(5, String.class, "f", false, "f");
    }


    public KBFDBDao(DaoConfig config) {
        super(config);
    }
    
    public KBFDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KBFDB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"component\" TEXT," + // 1: component
                "\"time\" TEXT," + // 2: time
                "\"k\" TEXT," + // 3: k
                "\"b\" TEXT," + // 4: b
                "\"f\" TEXT);"); // 5: f
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KBFDB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KBFDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String component = entity.getComponent();
        if (component != null) {
            stmt.bindString(2, component);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String k = entity.getK();
        if (k != null) {
            stmt.bindString(4, k);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(5, b);
        }
 
        String f = entity.getF();
        if (f != null) {
            stmt.bindString(6, f);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KBFDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String component = entity.getComponent();
        if (component != null) {
            stmt.bindString(2, component);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String k = entity.getK();
        if (k != null) {
            stmt.bindString(4, k);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(5, b);
        }
 
        String f = entity.getF();
        if (f != null) {
            stmt.bindString(6, f);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KBFDB readEntity(Cursor cursor, int offset) {
        KBFDB entity = new KBFDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // component
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // k
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // b
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // f
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KBFDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComponent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setF(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KBFDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KBFDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KBFDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

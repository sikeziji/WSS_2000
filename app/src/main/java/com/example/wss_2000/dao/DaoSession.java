package com.example.wss_2000.dao;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig componentsDBDaoConfig;
    private final DaoConfig errorDBDaoConfig;
    private final DaoConfig historyDBDaoConfig;
    private final DaoConfig kBFDBDaoConfig;
    private final DaoConfig logDBDaoConfig;
    private final DaoConfig parDBDaoConfig;

    private final ComponentsDBDao componentsDBDao;
    private final ErrorDBDao errorDBDao;
    private final HistoryDBDao historyDBDao;
    private final KBFDBDao kBFDBDao;
    private final LogDBDao logDBDao;
    private final ParDBDao parDBDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        componentsDBDaoConfig = daoConfigMap.get(ComponentsDBDao.class).clone();
        componentsDBDaoConfig.initIdentityScope(type);

        errorDBDaoConfig = daoConfigMap.get(ErrorDBDao.class).clone();
        errorDBDaoConfig.initIdentityScope(type);

        historyDBDaoConfig = daoConfigMap.get(HistoryDBDao.class).clone();
        historyDBDaoConfig.initIdentityScope(type);

        kBFDBDaoConfig = daoConfigMap.get(KBFDBDao.class).clone();
        kBFDBDaoConfig.initIdentityScope(type);

        logDBDaoConfig = daoConfigMap.get(LogDBDao.class).clone();
        logDBDaoConfig.initIdentityScope(type);

        parDBDaoConfig = daoConfigMap.get(ParDBDao.class).clone();
        parDBDaoConfig.initIdentityScope(type);

        componentsDBDao = new ComponentsDBDao(componentsDBDaoConfig, this);
        errorDBDao = new ErrorDBDao(errorDBDaoConfig, this);
        historyDBDao = new HistoryDBDao(historyDBDaoConfig, this);
        kBFDBDao = new KBFDBDao(kBFDBDaoConfig, this);
        logDBDao = new LogDBDao(logDBDaoConfig, this);
        parDBDao = new ParDBDao(parDBDaoConfig, this);

        registerDao(ComponentsDB.class, componentsDBDao);
        registerDao(ErrorDB.class, errorDBDao);
        registerDao(HistoryDB.class, historyDBDao);
        registerDao(KBFDB.class, kBFDBDao);
        registerDao(LogDB.class, logDBDao);
        registerDao(ParDB.class, parDBDao);
    }
    
    public void clear() {
        componentsDBDaoConfig.clearIdentityScope();
        errorDBDaoConfig.clearIdentityScope();
        historyDBDaoConfig.clearIdentityScope();
        kBFDBDaoConfig.clearIdentityScope();
        logDBDaoConfig.clearIdentityScope();
        parDBDaoConfig.clearIdentityScope();
    }

    public ComponentsDBDao getComponentsDBDao() {
        return componentsDBDao;
    }

    public ErrorDBDao getErrorDBDao() {
        return errorDBDao;
    }

    public HistoryDBDao getHistoryDBDao() {
        return historyDBDao;
    }

    public KBFDBDao getKBFDBDao() {
        return kBFDBDao;
    }

    public LogDBDao getLogDBDao() {
        return logDBDao;
    }

    public ParDBDao getParDBDao() {
        return parDBDao;
    }

}
